import pandas as pd
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
import re
from urllib.parse import parse_qs, urlparse
from typing import Optional, Tuple, Dict, Any

class GoogleSheet:
    def __init__(self, url: str):
        self.url = url
        self.spreadsheet_id, self.gid = self._extract_spreadsheet_info(url)
        self.service = self._init_service()
        self.sheet_name = self._get_sheet_name()
        
    @staticmethod
    def _is_colab() -> bool:
        try:
            from google.colab import auth
            return True
        except ImportError:
            return False

    def _authenticate(self) -> Optional[Credentials]:
        if self._is_colab():
            from google.colab import auth
            auth.authenticate_user()
            return None
        else:
            # Local authentication logic here
            raise NotImplementedError("Local authentication not implemented")

    def _init_service(self):
        creds = self._authenticate()
        return build('sheets', 'v4', credentials=creds)

    @staticmethod
    def _extract_spreadsheet_info(url: str) -> Tuple[str, str]:
        match = re.search(r'/d/([a-zA-Z0-9-_]+)', url)
        if not match:
            raise ValueError("Could not find spreadsheet ID in URL")
        spreadsheet_id = match.group(1)
        
        parsed = urlparse(url)
        query_params = parse_qs(parsed.fragment or parsed.query)
        gid = query_params.get('gid', ['0'])[0]
        
        return spreadsheet_id, gid

    def _get_sheet_name(self) -> str:
        sheet_metadata = self.service.spreadsheets().get(
            spreadsheetId=self.spreadsheet_id
        ).execute()
        
        for sheet in sheet_metadata.get('sheets', ''):
            if sheet['properties']['sheetId'] == int(self.gid):
                return sheet['properties']['title']
        return 'Sheet1'

    def read_to_dataframe(self) -> pd.DataFrame:
        """Read sheet contents into a pandas DataFrame."""
        result = self.service.spreadsheets().values().get(
            spreadsheetId=self.spreadsheet_id,
            range=self.sheet_name
        ).execute()
        
        values = result.get('values', [])
        if not values:
            raise ValueError('No data found in spreadsheet')
        
        headers = values[0]
        data = values[1:]
        return pd.DataFrame(data, columns=headers)

    def get_metadata(self) -> Dict[str, Any]:
        """Get sheet metadata."""
        metadata = self.service.spreadsheets().get(
            spreadsheetId=self.spreadsheet_id
        ).execute()
        return metadata

    def update_values(self, range_name: str, values: list):
        """Update values in specified range."""
        body = {
            'values': values
        }
        self.service.spreadsheets().values().update(
            spreadsheetId=self.spreadsheet_id,
            range=range_name,
            valueInputOption='RAW',
            body=body
        ).execute()

class GoogleDoc:
    def __init__(self, url: str):
        self.url = url
        self.document_id = self._extract_document_id(url)
        self.service = self._init_service()

    @staticmethod
    def _is_colab() -> bool:
        try:
            from google.colab import auth
            return True
        except ImportError:
            return False

    def _authenticate(self) -> Optional[Credentials]:
        if self._is_colab():
            from google.colab import auth
            auth.authenticate_user()
            return None
        else:
            # Local authentication logic here
            raise NotImplementedError("Local authentication not implemented")

    def _init_service(self):
        creds = self._authenticate()
        return build('docs', 'v1', credentials=creds)

    @staticmethod
    def _extract_document_id(url: str) -> str:
        match = re.search(r'/d/([a-zA-Z0-9-_]+)', url)
        if not match:
            raise ValueError("Could not find document ID in URL")
        return match.group(1)

    def get_document(self) -> Dict[str, Any]:
        """Retrieve the document's metadata and content."""
        document = self.service.documents().get(documentId=self.document_id).execute()
        return document

    def read_content(self) -> str:
        """Read the plain text content of the document."""
        document = self.get_document()
        content = self._extract_text(document)
        return content

    def _extract_text(self, document: Dict[str, Any]) -> str:
        """Extract text from the document's body."""
        text = ''
        for element in document.get('body', {}).get('content', []):
            paragraph = element.get('paragraph')
            if paragraph:
                for elem in paragraph.get('elements', []):
                    text_run = elem.get('textRun')
                    if text_run:
                        text += text_run.get('content', '')
        return text

    def update_content(self, new_text: str):
        """Replace the document's content with new_text."""
        # First, delete existing content
        requests = [
            {
                'deleteContentRange': {
                    'range': {
                        'startIndex': 1,
                        'endIndex': self._get_end_index()
                    }
                }
            },
            {
                'insertText': {
                    'location': {
                        'index': 1
                    },
                    'text': new_text
                }
            }
        ]
        result = self.service.documents().batchUpdate(
            documentId=self.document_id,
            body={'requests': requests}
        ).execute()
        return result

    def _get_end_index(self) -> int:
        """Get the end index for deleting content."""
        document = self.get_document()
        end_index = document.get('body').get('content')[-1].get('endIndex', 1)
        return end_index

    def append_content(self, additional_text: str):
        """Append text to the end of the document."""
        requests = [
            {
                'insertText': {
                    'location': {
                        'index': self._get_end_index() - 1
                    },
                    'text': additional_text
                }
            }
        ]
        result = self.service.documents().batchUpdate(
            documentId=self.document_id,
            body={'requests': requests}
        ).execute()
        return result

if __name__ == "__main__":
    # Test GoogleSheet functionality
    sheet_url = "https://docs.google.com/spreadsheets/d/your_spreadsheet_id/edit#gid=0"
    sheet = GoogleSheet(sheet_url)
    df = sheet.read_to_dataframe()
    print("First few rows of the Google Sheet:")
    print(df.head())

    # Test GoogleDoc functionality
    doc_url = ""  # Leave this empty or add your Google Doc URL
    doc = GoogleDoc(doc_url)
    
    # Read content from the Google Doc
    content = doc.read_content()
    print("\nContent of the Google Doc:")
    print(content)
    print(f"Error reading content: {e}")
    
    # Update the content of the Google Doc
    new_content = "This is the new content of the document."
    doc.update_content(new_content)
    print("\nGoogle Doc content has been updated.")
    print(f"Error updating content: {e}")

    # Append content to the Google Doc
    additional_text = "\nThis text was appended to the document."
    doc.append_content(additional_text)
    print("\nAdditional content has been appended to the Google Doc.")
    print(f"Error appending content: {e}")